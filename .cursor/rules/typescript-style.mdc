---
globs: *.ts,*.tsx
description: TypeScript 工程风格、命名与错误处理约定
---

## 命名与类型

- 导出 API 与公共函数必须显式类型注解；局部中间变量可由 TS 推断。
- 使用完整语义化命名，避免缩写（参考 Clean Code）。
- 避免 `any`；若确需使用，限制作用域并给出明确理由。
- 共享类型集中在 `src/custom.d.ts`：涉及 `window.api`/`window.utools` 的接口要同步维护。

## 控制流与错误处理

- 优先使用守卫式返回，避免深层嵌套。
- 仅在有意义地处理或转换错误时使用 `try/catch`，并输出对用户友好的信息。
- UI 层错误统一经过 `CustomMessage`；预加载层返回结构化错误消息。

## 格式与结构

- 遵循仓库现有 ESLint 配置；不要为与任务无关的文件做大范围格式化。
- 长行适当换行；避免复杂的三元表达式与深层回调。
- 组件 props 明确、窄化；优先拆分细粒度组件而非增加可选 props。

## 性能与可维护性

- 使用 `useMemo`/`useCallback` 缓存昂贵计算与处理器；避免非必要依赖导致的重渲染。
- 用常量集中管理默认值（如 `DEFAULT_OTP_PERIOD` 等）。
- 单一计时器模型由父组件下发时间状态，子组件无感知定时器。

